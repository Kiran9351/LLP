     1                                  section .data
     2 00000000 456E746572206E756D-     	getN db "Enter number of elemets: ",0
     2 00000009 626572206F6620656C-
     2 00000012 656D6574733A2000   
     3 0000001A 256400                  	input db "%d",0
     4 0000001D 4164646974696F6E20-     	output db "Addition of array is %d",10,0
     4 00000026 6F6620617272617920-
     4 0000002F 69732025640A00     
     5                                  
     6                                  section .bss
     7 00000000 <res 00000028>          	array resd 10
     8 00000028 <res 00000004>          	n resd 1
     9                                  	
    10                                  section .text
    11                                  	global main
    12                                  	extern printf,scanf
    13                                  
    14                                  main:
    15                                  	;;printing getN message
    16                                  	;;printf("Enter number of elements: ");
    17                                  	
    18 00000000 68[00000000]            	push getN
    19 00000005 E8(00000000)            	call printf
    20 0000000A 83C404                  	add esp,4
    21                                  
    22                                  	;;get number from user
    23                                  	;; scanf("%d",&n);
    24                                  	
    25 0000000D 68[28000000]            	push n
    26 00000012 68[1A000000]            	push input
    27 00000017 E8(00000000)            	call scanf 
    28 0000001C 83C408                  	add esp,8
    29                                  	
    30                                  	;; Get n elements from user
    31                                  	
    32                                  	;; for(i = 0; i < n; i++)
    33                                  	;; {
    34                                  	;; 	scanf("%d",&array[i]);
    35                                  	;; }
    36                                  	
    37                                  	;;for i using ecx
    38 0000001F 31C9                    	xor ecx,ecx 		;;making ecx = 0 as i = 0
    39                                  
    40                                  scan:	
    41                                  	;;get pointer to the address of first element i.e. start of array
    42                                  	
    43 00000021 BB[00000000]            	mov ebx,array
    44 00000026 B804000000              	mov eax,4  	;;using eax = 4 as integer takes 4 bytes
    45 0000002B F7E1                    	mul ecx		;;multiplying ecx for getting address of ith element ecx is i
    46 0000002D 01C3                    	add ebx,eax
    47                                  
    48                                  	;;scanf("%d",&array[i]);
    49                                  	
    50 0000002F 60                      	pusha
    51 00000030 53                      	push ebx
    52 00000031 68[1A000000]            	push input
    53 00000036 E8(00000000)            	call scanf
    54 0000003B 83C408                  	add esp,8
    55 0000003E 61                      	popa
    56                                  
    57                                  	;;i++
    58 0000003F 41                      	inc ecx
    59                                  	
    60                                  	;;i < n
    61 00000040 3B0D[28000000]          	cmp ecx,dword[n]
    62 00000046 7CD9                    	jl scan
    63                                  
    64                                  	;;Now we will do addition
    65                                  	
    66                                  	;;for(i = 0;i < n; i++)
    67                                  	;;{
    68                                  	;;	sum = sum + array[i];
    69                                  	;;}
    70                                  	
    71                                  	;; i = 0
    72 00000048 31C9                    	xor ecx,ecx
    73                                  
    74                                  	;;sum = 0
    75 0000004A 31F6                    	xor esi,esi
    76                                  	
    77                                  while:
    78                                  	;;ebx = array (address)
    79 0000004C BB[00000000]            	mov ebx, array
    80                                  	
    81                                  	;; eax = 4 (size of integer)
    82 00000051 B804000000              	mov eax,4
    83                                  	
    84                                  	;;i * sizeof(int) to get address of next element
    85 00000056 F7E1                    	mul ecx
    86                                  	
    87                                  	;;array address + (i * sizeof(int))
    88 00000058 01C3                    	add ebx,eax
    89                                  	
    90                                  	;; sum = sum + array[i]
    91 0000005A 0333                    	add esi,dword[ebx]
    92                                  	 
    93                                  	;;i++
    94 0000005C 41                      	inc ecx
    95                                  
    96                                  	;;i < n
    97 0000005D 3B0D[28000000]          	cmp ecx, dword[n]
    98                                  	
    99                                  	;; for()
   100 00000063 7CE7                    	jl while	
   101                                  	
   102                                  endof:
   103                                  	;;printf("addition of array is: %d",sum);
   104                                  	
   105 00000065 60                      	pusha
   106 00000066 56                      	push esi
   107 00000067 68[1D000000]            	push output
   108 0000006C E8(00000000)            	call printf
   109 00000071 83C408                  	add esp,8
   110 00000074 61                      	popa
   111                                  
   112 00000075 C3                      	ret		
